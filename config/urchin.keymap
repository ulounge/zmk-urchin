/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_french.h"


// Layer definitions
#define BASE 0
#define SHT 1
#define ACCENT 2
#define NUM 3
#define EXT 4
#define FNC 5
#define SETTINGS 6
// -----------------

	
&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {

		// Enables switching between layers Accent and Numbers
		// by performing a tap-dance sequence.
		td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&sl ACCENT>, <&sl NUM>;
        };

		// Enables switching between layers EXT and Function
		// by performing a tap-dance sequence.
		td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&sl EXT>, <&sl FNC>;
        };


		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			flavor = "tap-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};


		// Majuscules accentu√©es

		// Hold tap on accents to Maj
		aMgrav: aMgrav { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings = <&a_M_grav> , <&kp>;
        };
		iMcirc: iMcirc { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings = <&i_M_circ> , <&i_circ>;
        };
		oMcirc: oMcirc { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings = <&o_M_circ> , <&o_circ>;
        };
		eMcirc: eMcirc { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings = <&e_M_circ> , <&e_circ>;
        };
		eMeacu: eMeacu { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings =<&e_M_eacu> , <&kp>;
        };
		eMgrav: eMgrav { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings = <&e_M_grav> , <&kp>;
        };
		cMcced: cMcced { 
            compatible = "zmk,behavior-hold-tap"; 
            #binding-cells = <2>; 
            tapping-term-ms = <350>; 
            flavor = "tap-preferred"; 
            quick-tap-ms = <200>; 
            bindings = <&c_M_cced> , <&kp>;
        };
	};

	macros {
		// Turn off Windows
		win_off: win_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <40>;
            tap-ms = <40>;
            bindings
                = <&macro_press   &kp LWIN>
                , <&macro_tap     &kp FR_X>
                , <&macro_release &kp LWIN>
                , <&macro_tap     &kp FR_U &kp FR_U>
                ;
        };
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};

		// Accents macro


		
		a_circ: a_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp FR_A>
    		;
		};
		e_circ: e_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp FR_E>
    		;																	
		};
		e_M_circ: e_M_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp LS(FR_E)>
    		;																	
		};
		e_M_grav: e_M_grav {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_GRV &kp LS(FR_E)>
    		;
		};
		e_trem: e_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_DIAE &kp FR_E>
    		;
		};
		u_circ: u_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp FR_U>
    		;
		};
		i_circ: i_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp FR_I>
    		;
		};
		i_M_circ: i_M_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp LS(FR_I)>
    		;
		};
		i_trem: i_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_DIAE &kp FR_I>
    		;
		};
		o_circ: o_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp FR_O>
			;
		};
		o_M_circ: o_M_circ {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC &kp LS(FR_O)>
    		;
		};	
		a_M_grav: a_M_grav {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_GRV &kp LS(FR_A)>
    		;
		};



		// Only Windows, sorry



		a_e: a_e {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N3 &kp KP_N0>
    		, <&macro_release &kp LALT>
    		;
		};
		o_e: o_e {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N5 &kp KP_N6>
    		, <&macro_release &kp LALT>
    		;
		};
		c_M_cced: c_M_cced {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N1 &kp KP_N9 &kp KP_N9>
    		, <&macro_release &kp LALT>
    		;
		};
		e_M_eacu: e_M_eacu {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N1>
    		, <&macro_release &kp LALT>
    		;
		};
	};

	combos {
		compatible = "zmk,combos";
		// both left thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = <30 31>;
			bindings = <&mo SETTINGS>;
		};
		// left index & middle fingers (home-row)
		// hold space for Figma...
		combo_ctrl_space {
			timeout-ms = <200>;
			key-positions = <12 13>;
			bindings = <&kp SPACE>;
			layers = <BASE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			display-name = "Base";
			bindings = <
			&qt LS(FR_Q) FR_Q &qt LS(FR_C) FR_C &qt LS(FR_O) FR_O 	&qt LS(FR_P) FR_P &qt LS(FR_W) FR_W         &qt LS(FR_J) FR_J  &qt LS(FR_M) FR_M  &qt LS(FR_D) FR_D     &qt FR_DQUO FR_QUOT   	&qt LS(FR_Y) FR_Y 
			&qt LS(FR_A) FR_A &qt LS(FR_S) FR_S &qt LS(FR_E) FR_E 	&qt LS(FR_N) FR_N &qt LS(FR_F) FR_F         &qt LS(FR_L) FR_L  &qt LS(FR_R) FR_R  &qt LS(FR_T) FR_T     &qt LS(FR_I) FR_I   	&qt LS(FR_U) FR_U
			&qt LS(FR_Z) FR_Z &qt LS(FR_X) FR_X &qt FR_QUES FR_MINS &qt LS(FR_V) FR_V &qt LS(FR_B) FR_B         &qt FR_COLN FR_DOT &qt LS(FR_H) FR_H  &qt LS(FR_G) FR_G  	&qt FR_SCLN FR_COMM    	&qt LS(FR_K) FR_K
							           											&td1  &qt LSHIFT SPACE   		&lt SHT ENTER &td0
			>;
		};
		// Used for system short cuts
		sht_layer {
			display-name = "ShortC";
			bindings = <
			&kp LC(LA(LG(FR_AMPR))) &kp LC(LA(LG(FR_EACU))) &kp LC(LA(LG(FR_DQUO))) &kp LC(LA(LG(FR_QUOT))) &kp LC(LA(LG(FR_LPRN)))     &none 			 &none 			  &none 			&none 		 &none 
			&kp LG(SPACE)			&none 					&kp C_MUTE 				&kp C_VOL_DN 			&kp C_VOL_UP    			&kp LC(RA(FR_X)) &kp LC(RA(FR_Y)) &kp LC(RA(FR_D)) 	&none 		 &none
			&kp PRINTSCREEN 		&none 					&kp C_PREV 				&kp C_PP  				&kp C_NEXT					&kp LC(RA(FR_U)) &kp LC(RA(FR_S)) &none 			&none 		 &none 
																											&trans  &trans 				&trans &trans 
			>;
		};
		// Used to type french accents and high frequency symbols
		accent_layer {
			display-name = "Accent";
			bindings = <
			&a_circ 			&cMcced 0 FR_CCED 	&o_e 				&oMcirc 0 0  			&kp FR_EURO         		&kp FR_HASH  		&qt FR_PND FR_DLR 	&kp FR_AMPR 	&kp FR_EXLM 	&u_circ 
			&aMgrav 0 FR_AGRV  	&eMeacu 0 FR_EACU 	&eMgrav 0 FR_EGRV 	&eMcirc 0 0 			&e_trem 		  			&kp FR_PIPE  		&kp FR_UNDS 		&iMcirc 0 0 	&i_trem 	 	&kp FR_UGRV
			&a_e 				&kp FR_BSLS   		&kp FR_SLSH 		&qt FR_LABK FR_LPRN 	&qt FR_RABK FR_RPRN         &qt FR_LCBR FR_LBRC &qt FR_RCBR FR_RBRC &none  			&none  			&kp FR_AT
																								&trans  &trans   			&trans &trans 
			>;
		};
		// Numbers and high frequency symbols
		num_layer {
			display-name = "Num";
			bindings = <
			&none &none  		&kp FR_GRV 		&kp FR_TILD				&kp FR_PERC					&kp FR_SLSH &kp FR_7 &kp FR_8 &kp FR_9	&kp FR_MINS
			&none &none  		&kp FR_CIRC  	&kp FR_BSLS 			&kp FR_DOT        			&kp FR_ASTR &kp FR_4 &kp FR_5 &kp FR_6 	&kp FR_PLUS
			&none &kp FR_SUP2  	&kp FR_DIAE 	&qt FR_LABK FR_LPRN 	&qt FR_RABK FR_RPRN	 		&kp FR_0 	&kp FR_1 &kp FR_2 &kp FR_3 	&kp FR_EQL
																		&trans  &trans   			&trans &trans
			>;
		};

		// Main modifiers and arrow keys
		ext_layer {
			display-name = "Mods";
			bindings = <
			&kp ESC   	  &none		&none 	   &kp LC(LS(V))	&kp LC(FR_A)    &kp PG_UP  	 &kp HOME  &kp UP 	 &kp END 	 &kp CAPS
			&sk LALT 	  &sk LGUI 	&sk LSHIFT &sk LCTRL 		&sk RALT  		&kp PG_DN 	 &kp LEFT  &kp DOWN  &kp RIGHT   &kp DEL
			&kp LC(FR_Z)  &kp LC(X) &kp LC(C)  &kp LC(V) 		&kp TAB         &kp LC(BSPC) &kp BSPC  &none 	 &none 		 &none
													&trans &kp LCTRL    		&trans  &trans 
			>;
		};

		// Function keys with modifiers
		fnc_layer {
			display-name = "Func.";
			bindings = <
			&kp F1 		&kp F2 		&kp F3 		&kp F4 		&kp F5          &kp F6 	&kp F7 	&kp F8 	&kp F9 	&kp F10 
			&sk LALT 	&sk LGUI 	&sk LSHIFT 	&sk LCTRL 	&sk RALT    	&none 	&none	&none 	&kp F11 &kp F12
			&none  		&none 		&none  		&none   	&none 			&none   &none 	&none  	&none   &none 
							  							&trans &trans 		&trans &trans  
			>;
		};

		// Used to change the keyboard's settings.
		settings_layer {
				display-name = "Sett.";
				bindings = <
				&bootloader 	&none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
				&none 			&none &none &none      &bt BT_SEL 1 			  &bt BT_SEL 4 &none &none 	  &none &none
				&win_off		&none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none 	  &none &none
														&trans &trans   		  &trans &trans 
				>;
		};
	};
};
/*
NOT USED
 
 #define TAPHOLD_SYMBOL(NAME, TAP, HOLD) \
         NAME: NAME { \
            compatible = "zmk,behavior-hold-tap"; \
            label = ZMK_MACRO_STRINGIFY(NAME); \
            #binding-cells = <2>; \
            tapping-term-ms = <350>; \
            flavor = "tap-preferred"; \
            quick-tap-ms = <200>; \
            bindings = <HOLD>, <TAP>; \
        };

	symbols {
        TAPHOLD_SYMBOL(aMgrav,&kp FR_AGRV,&a_M_grav )
        
        };

a_trem: a_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N2 &kp KP_N8>
    		, <&macro_release &kp LALT>
    		;
		};
o_trem: o_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N4 &kp KP_N6>
    		, <&macro_release &kp LALT>
    		;
		};
u_trem: u_trem {
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N5 &kp KP_N2>
    		, <&macro_release &kp LALT>
    		;
		};
		i_M_circ: i_M_circ {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_tap     &kp FR_CIRC>
			, <&macro_press   &kp LS>
    		, <&macro_tap     &kp FR_I>
    		, <&macro_release &kp LS>
    		;
		};
		o_M_circ: o_M_circ {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N1 &kp KP_N2>
    		, <&macro_release &kp LALT>
    		;
		};
		e_M_circ: e_M_circ {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N2>
    		, <&macro_release &kp LALT>
    		;
		};
		e_M_grav: e_M_grav {
			compatible = "zmk,behavior-macro"; 
			#binding-cells = <0>;
			wait-ms = <40>;
			tap-ms = <40>;
			bindings
    		= <&macro_press   &kp LALT>
    		, <&macro_tap     &kp KP_N0 &kp KP_N2 &kp KP_N0 &kp KP_N0>
    		, <&macro_release &kp LALT>
    		;
		};
*/